---
title: Service Keys for Solace Messaging Service Instances
owner: Partners
---

This topic describes how developers can manage service keys for Solace Messaging service instances.

##<a id='service-keys'></a>About Service Keys

A service key is a way of obtaining credentials for a Solace Messaging service instance.

When using service keys the developer assumes the responsibility of passing the credentials associated with the service key to the app. 

The act of creating a service key for a service instance produces [Solace Messaging Credentials](credentials.html), these credentials will be associated with the service key.

The act of deleting a service key of a service instance revokes the associated credentials.

Obtaining credential using service keys can be used for apps that are not hosted in Cloud Foundry. A typical use case is when you have TCP Routes enabled and you have apps running outside Cloud Foundry that needs access to Solace Messaging Services running inside Cloud Foundry.

The following tutorials assume you have created a Solace Messaging service called *solace-messaging-instance* as discussed in [Service Instances](service-instances.html) and that you have some app running outside of Cloud Foundry.

Learn more from Cloud Foundry about [Managing service keys](https://docs.cloudfoundry.org/devguide/services/service-keys.html)

##<a id='create-service-key-cf-cli'></a>Creating a Service Key for a Service Instance with the cf CLI

To create a service key for an existing Solace Messaging service with the cf CLI, perform the following steps:

1. Set your API endpoint to the Cloud Controller of your deployment.
  <pre class="terminal">
  $ cf api api.YOUR-SYSTEM-DOMAIN
  Setting api endpoint to api.YOUR-SYSTEM-DOMAIN...
  OK
  API endpoint:  <span>https:</span>//api.YOUR-SYSTEM-DOMAIN (API version: 2.59.0)
  Not logged in. Use 'cf login' to log in.
  </pre>

1. Log in to your deployment and select an org and a space.
  <pre class="terminal">
  $ cf login
  API endpoint: <span>https:</span>//api.YOUR-SYSTEM-DOMAIN
  Email> user<span>@</span>example.com
  Password>
  </pre>


1. Locate the previously created service.
  <pre class="terminal">
   $ cf services
   Getting services in org example / space dev as user<span>@</span>example.com...
   OK
   name                        service            plan     bound apps   last operation
   solace-messaging-instance   solace-messaging   large-ha              create succeeded
  </pre>

1. Create the service key for the solace-messaging-instance and name it *external-mobile-app*.
  <pre class="terminal">
  $ cf create-service-key solace-messaging-instance external-mobile-app
  Creating service key external-mobile-app for service instance solace-messaging-instance as user<span>@</span>example.com...
  OK
  </pre>

1. List the service keys for our service instance.
  <pre class="terminal">
  $ cf service-keys solace-messaging-instance
  Getting keys for service instance solace-messaging-instance as user<span>@</span>example.com...
  name
  external-mobile-app
  </pre>

##<a id='getting-service-key-cf-cli'></a>Getting Service Key Credentials

 Assuming you have created a service key *external-mobile-app* for *solace-messaging-instance*. 

1. Get the service key credentials.

  <pre class="terminal">
  $ cf service-key solace-messaging-instance external-mobile-app
  Getting key external-mobile-app for service instance solace-messaging-instance as user<span>@</span>example.com...

  {
  "clientPassword": "848e5357-2185-4c6c-bd98-8afc2da26492",
  "clientUsername": "v002.cu000006",
  "publicJmsJndiUris": [
   "smf://tcp.local.pcfdev.io:61072"
  ],
  "publicMqttTlsUris": [
   "ssl://tcp.local.pcfdev.io:61027"
  ],
  "publicMqttUris": [
   "tcp://tcp.local.pcfdev.io:61039"
  ],
  (...)
  "managementHostnames": [
   "shared-vmr-0.local.pcfdev.io"
  ],
  "managementPassword": "39159deafcd44b0ebee9d504807dbdd1",
  "managementUsername": "v002-mgmt",
  (...)
  }
  </pre>
  <p class="note"><strong>Note</strong>: With TCP Routes enabled, the apps hosted outside Cloud Foundry should use all the *public* ports for messaging.</p>


##<a id='saving-service-key-cf-cli'></a>Saving Service Key Credentials

 Assuming you have created a service key *external-mobile-app* for *solace-messaging-instance*. 

1. Save the service key credentials to a file.

This will save the contents of the service key credentials to a file called external-mobile-app.key.
A developer is responsible to pass this file to an app that needs to use the solace-messaging-instance

  <pre class="terminal">
  $ cf service-key solace-messaging-instance external-mobile-app | grep -v Getting > external-mobile-app.key
  </pre>

##<a id='delete-service-key-cf-cli'></a>Deleting a Service Key for a Service Instance with the cf CLI

  To revoke an app's permission to use a Solace Messaging Instance you can delete its service key.

  Assuming you have created a service key *external-mobile-app* for *solace-messaging-instance*.

1. Delete the service key for the service instance.


  <pre class="terminal">
  $ cf delete-service-key solace-messaging-instance external-mobile-app

  Really delete the service key external-mobile-app?> yes
  Deleting key external-mobile-app for service instance solace-messaging-instance as user<span>@</span>example.com...
  OK
  </pre>

